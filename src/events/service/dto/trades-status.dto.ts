import { ApiProperty } from '@nestjs/swagger'

export enum TradingEvents {
  new = 'new',
  fill = 'fill',
  partial_fill = 'partial_fill',
  canceled = 'canceled',
  expired = 'expired',
  done_for_day = 'done_for_day',
  replaced = 'replaced',
}

export enum OrderStatus {
  new = 'new',
  partially_filled = 'partially_filled',
  filled = 'filled',
  done_for_day = 'done_for_day',
  canceled = 'canceled',
  expired = 'expired',
  replaced = 'replaced',
  pending_cancel = 'pending_cancel',
  pending_replace = 'pending_replace',
}

export class OrderDto {
  @ApiProperty({
    type: String,
    format: 'uuid',
    description: 'Order ID generated by Alpaca',
  })
  id: string

  @ApiProperty({
    type: String,
    format: 'uuid',
    description: 'Client unique order ID',
  })
  client_order_id: string

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
  })
  created_at: string

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
    nullable: true,
  })
  updated_at: string | null

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
    nullable: true,
  })
  submitted_at: string | null

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
    nullable: true,
  })
  filled_at: string | null

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
    nullable: true,
  })
  expired_at: string | null

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
    nullable: true,
  })
  canceled_at: string | null

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
    nullable: true,
  })
  failed_at: string | null

  @ApiProperty({
    type: String,
    format: 'date-time',
    example: '2022-07-14T17:25:21.145057Z',
    nullable: true,
  })
  replaced_at: string | null

  @ApiProperty({
    type: String,
    format: 'uuid',
    nullable: true,
    description: 'The order ID that this order was replaced by.',
  })
  replaced_by: string | null

  @ApiProperty({
    type: String,
    format: 'uuid',
    nullable: true,
    description: 'The order ID that this order replaces.',
  })
  replaces: string

  @ApiProperty({
    type: String,
    format: 'uuid',
    description: 'The asset ID.',
  })
  asset_id: string

  @ApiProperty({
    type: String,
    format: 'uuid',
    description: 'The asset symbol',
  })
  symbol: string

  @ApiProperty({
    type: String,
    format: 'uuid',
    description: 'The asset class',
  })
  asset_class: string

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description:
      'Ordered notional amount. If entered, qty will be null. Can take up to 9 decimal points.',
  })
  notional: string | number

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description:
      'Ordered quantity. If entered, notional will be null. Can take up to 9 decimal points.',
  })
  qty: string | number

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description: 'Filled quantity.',
  })
  filled_qty: string | number

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description:
      'Filled average price. Can be 0 until order is processed in case order is passed outside of market hours.',
  })
  filled_avg_price: string | number

  @ApiProperty({
    type: String,
    description: 'Valid values: simple, bracket, oco or oto',
  })
  order_class: string

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description: '(Deprecated with just type field below.)',
    deprecated: true,
  })
  order_type: string | number

  @ApiProperty({
    type: String,
    description:
      'Valid values: market, limit, stop, stop_limit, trailing_stop.',
  })
  type: string

  @ApiProperty({
    type: String,
    description: 'Valid values: buy and sell',
  })
  side: string

  @ApiProperty({
    type: String,
  })
  time_in_force: string

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description: 'Limit price',
  })
  limit_price: string | number

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description: 'Stop price',
  })
  stop_price: string | number

  @ApiProperty({
    enum: OrderStatus,
  })
  status: OrderStatus

  @ApiProperty({
    enum: Boolean,
    description:
      'If true, eligible for execution outside regular trading hours.',
  })
  extended_hours: boolean

  @ApiProperty({
    enum: [],
    description:
      'When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.',
  })
  legs: []

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description:
      'The percent value away from the high water mark for trailing stop orders.',
  })
  trail_percent: string | number

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description:
      'The dollar value away from the high water mark for trailing stop orders.',
  })
  trail_price: string | number

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description:
      'The highest (lowest) market price seen since the trailing stop order was submitted.',
  })
  hwm: string | number

  @ApiProperty({
    oneOf: [{ type: 'string' }, { type: 'number' }],
    description: 'The dollar value commission you want to charge the end user.',
  })
  commission: string | number
}

export class TradesStatusDto {
  @ApiProperty({
    type: String,
    format: 'uuid',
  })
  account_id: string

  @ApiProperty({
    type: String,
    description: 'Timestamp of event',
  })
  at: string

  @ApiProperty({
    enum: TradingEvents,
  })
  event: TradingEvents

  @ApiProperty({
    type: Number,
    description: 'Monotonically increasing 64bit integer',
  })
  event_id: number

  @ApiProperty({
    type: String,
    description:
      'Corresponding execution of an order. If an order gets filled over two executions (a partial_fill for example), you will receive two events with different IDs.',
  })
  execution_id: number

  @ApiProperty({
    type: () => OrderDto,
  })
  oder: OrderDto

  @ApiProperty({
    type: String,
    format: 'timestamp',
  })
  timestamp: string
}
